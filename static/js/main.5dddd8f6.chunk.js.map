{"version":3,"sources":["components/header/header.jsx","api/api.js","redux/usersReducer.js","components/user/user.jsx","components/users/users.jsx","components/post/post.jsx","components/new-post-form/new-post-form.jsx","components/posts/posts.jsx","components/post-details/comments-item.jsx","components/post-details/comments.jsx","components/post-details/post-details.jsx","components/app/app.jsx","redux/store.js","index.js"],"names":["Header","className","to","instance","axios","baseURL","withCredentials","taskAPI","get","userId","post","postId","put","delete","SET_USERS","SET_USER_POSTS","ADD_POST","SET_COMMENTS","initialState","users","userPosts","comments","setUserPosts","type","getUsers","dispatch","then","response","user","data","addNewPost","newPost","console","log","payload","getComments","setComments","usersReducer","state","action","User","id","name","email","src","alt","Users","useSelector","useDispatch","useEffect","map","React","memo","Post","title","body","PostForm","props","useState","setTitle","setBody","titleDirty","setTitleDirty","bodyDirty","setBodyDirty","titleError","setTitleError","bodyError","setBodyError","formValid","setFormValid","blurHandler","e","target","onSubmit","preventDefault","closeModal","style","color","onBlur","onChange","value","placeholder","disabled","Modal","setAppElement","Posts","modalIsOpen","setModalIsOpen","itemId","match","params","onClick","posts","isOpen","onRequestClose","preventScroll","overlayClassName","withRouter","CommentsItem","comment","editMode","setEditMode","inputTitle","setInputTitle","textareaBody","setTextareaBody","getPost","setTimeout","history","push","App","exact","path","component","render","reducers","combineReducers","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.5dddd8f6.chunk.js","sourcesContent":["\r\nimport { Link } from 'react-router-dom';\r\nimport './header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <Link to=\"/\">Incora Task</Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://jsonplaceholder.typicode.com/\",\r\n    withCredentials: true\r\n});\r\n\r\nexport const taskAPI = {\r\n    getUsers () {\r\n        return instance.get(`users/`);\r\n    },\r\n\r\n    getUserPosts(userId) {\r\n        return instance.get(`posts?userId=${userId}`);\r\n    },\r\n\r\n    addPost (post) {\r\n        return instance.post(`posts`, post);\r\n    },\r\n\r\n    getPost (postId) {\r\n        return instance.get(`posts/${postId}`);\r\n    },\r\n\r\n    getComments(postId) {\r\n        return instance.get(`/comments?postId=${postId}`);\r\n    },\r\n\r\n    updatePost (postId, post) {\r\n        return instance.put(`posts/${postId}`, post);\r\n    },\r\n\r\n    deletePost (postId) {\r\n        return instance.delete(`posts/${postId}`);\r\n    }\r\n}","import {taskAPI} from \"../api/api\";\r\n\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_USER_POSTS = \"SET_USER_POSTS\";\r\nconst ADD_POST = \"ADD_POST\";\r\nconst SET_COMMENTS = \"SET_COMMENTS\";\r\n\r\nlet initialState = {\r\n    users: [],\r\n    userPosts: [],\r\n    comments: [],\r\n}\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_USER_POSTS:\r\n            return {\r\n                ...state,\r\n                userPosts: action.userPosts\r\n            }\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                userPosts: [...state.userPosts, action.payload]\r\n            };\r\n        }\r\n        case SET_COMMENTS:\r\n            return {\r\n                ...state,\r\n                comments: action.comments\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setUsers = (users) => ({type: SET_USERS, users});\r\n\r\nconst setUserPosts = (userPosts) => ({type: SET_USER_POSTS, userPosts});\r\n\r\nconst addPost = (data) => ({type: ADD_POST, payload: data});\r\n\r\nconst setComments = (comments) => ({type: SET_COMMENTS, comments});\r\n\r\nexport const getUsers = () => (dispatch) => {\r\n    taskAPI.getUsers()\r\n        .then(response => {\r\n            const user = response.data;\r\n            dispatch(setUsers(user));\r\n        })\r\n};\r\n\r\nexport const getUserPosts = (userId) => (dispatch) => {\r\n    taskAPI.getUserPosts(userId)\r\n        .then(response => {\r\n            const userPosts = response.data;\r\n            dispatch(setUserPosts(userPosts));\r\n        });\r\n}\r\n\r\nexport const addNewPost = (newPost) => (dispatch) => {\r\n    taskAPI.addPost(newPost)\r\n        .then((response) => {\r\n            console.log(response);\r\n            dispatch(addPost(response.data));\r\n        })\r\n\r\n};\r\n\r\n\r\nexport const getPost = (postId) => (dispatch) => {\r\n    taskAPI.getPost(postId)\r\n        .then((response) => {\r\n            console.log(response);\r\n            dispatch(setUserPosts(response.data));\r\n        })\r\n};\r\n\r\nexport const getComments = (postId) => (dispatch) => {\r\n    taskAPI.getComments(postId)\r\n        .then(response => {\r\n            const comments = response.data;\r\n            dispatch(setComments(comments))\r\n        })\r\n};\r\n\r\nexport const deletePost = (postId) => (dispatch) => {\r\n    taskAPI.deletePost(postId)\r\n        .then((response) => {\r\n            console.log(response);\r\n            dispatch(setUserPosts([]));\r\n        })\r\n};\r\n\r\nexport const updatePost = (postId, post) => (dispatch) => {\r\n    taskAPI.updatePost(postId, post)\r\n        .then((response) => {\r\n            console.log(response);\r\n            dispatch(setUserPosts(post));\r\n        })\r\n};\r\n\r\nexport default usersReducer;","import {Link} from \"react-router-dom\";\r\nimport './user.scss';\r\n\r\nconst User = ({id, name, email}) => {\r\n  \r\n  return (\r\n    <div className=\"user\">\r\n      <img src=\"https://via.placeholder.com/300\" alt=\"user\" className=\"user-img\"/>\r\n      <h3>{name}</h3>\r\n      <p>email: {email}</p>\r\n      <Link to={`/posts/${id}`} className=\"btn-user\">Posts</Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React,  { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUsers } from \"../../redux/usersReducer\";\r\nimport User from \"../user/user\";\r\n\r\nimport './users.scss';\r\n\r\nconst Users = () => {\r\n\r\n  const {users} = useSelector(state => state.users);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers());\r\n  }, [dispatch]);\r\n\r\n\r\n  return (\r\n    <div className=\"users\">\r\n      {\r\n        users.map(user => <User key={user.id} name={user.name} email={user.email} id={user.id} />)\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Users);\r\n","import { Link } from 'react-router-dom';\r\nimport './post.scss';\r\n\r\nconst Post = ({title, body, id}) => {\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"author\">\r\n        <h3>{title}</h3>\r\n        <div className=\"btn-block\">\r\n          <Link to={`/post-details/${id}`} className=\"details-btn\">Details</Link>\r\n        </div>\r\n      </div>\r\n      <p className=\"post-text\">\r\n        {body}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React ,{useState} from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch} from \"react-redux\";\r\nimport { addNewPost } from \"../../redux/usersReducer\";\r\n\r\nimport \"./new-post-form.scss\";\r\n\r\nconst PostForm = (props) => {\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [body, setBody] = useState(\"\");\r\n\r\n    const [titleDirty, setTitleDirty] = useState(false);\r\n    const [bodyDirty, setBodyDirty] = useState(false);\r\n\r\n    const [titleError, setTitleError] = useState(\"Title can not be empty\");\r\n    const [bodyError, setBodyError] = useState(\"Body can not be empty\");\r\n\r\n    const [formValid, setFormValid] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addPost = (e) => {\r\n        e.preventDefault();\r\n       dispatch(addNewPost({title, body}));\r\n       props.closeModal(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (titleError || bodyError) {\r\n            setFormValid(false)\r\n        } else {\r\n            setFormValid(true);\r\n        }\r\n    }, [titleError, bodyError])\r\n\r\n    const handleInputChange = (e) => {\r\n        setTitle(e.target.value);\r\n\r\n        if(title === \"\") {\r\n            setTitleError(\"fill in the title\");\r\n        } else {\r\n            setTitleError(\"\")\r\n        }\r\n    }\r\n\r\n    \r\n    const handleTextareaChange = (e) => {\r\n        setBody(e.target.value);\r\n\r\n        if(body === \"\") {\r\n            setBodyError(\"fill in the body\");\r\n        } else {\r\n            setBodyError(\"\")\r\n        }\r\n    }\r\n\r\n    const blurHandler = (e) => {\r\n        switch(e.target.name) {\r\n            case \"title\":\r\n                setTitleDirty(true)\r\n                break;\r\n            case \"body\": \r\n                setBodyDirty(true)\r\n                break;\r\n            default:\r\n                return \"\"\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={addPost} className=\"modal-form\">\r\n            <p>Title:</p>\r\n            {(titleDirty && titleError) && <div style={{color: \"red\"}}>{titleError}</div>}\r\n            <input type=\"text\"\r\n                name=\"title\"\r\n                onBlur={(e) => blurHandler(e)}\r\n                onChange={handleInputChange}\r\n                value={title}\r\n                className=\"input-form\"\r\n                placeholder=\"text..\" />\r\n            <p>Your text:</p>\r\n            {(bodyDirty && bodyError) && <div style={{color: \"red\"}}>{bodyError}</div>}\r\n            <textarea name=\"body\"\r\n                onBlur={(e) => blurHandler(e)}\r\n                value={body}\r\n                onChange={handleTextareaChange}\r\n                className=\"textarea-form\">\r\n            </textarea>\r\n            <button disabled={!formValid} type=\"submit\" className=\"btn-form\">Post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PostForm;","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Post from '../post/post';\r\nimport { getUserPosts } from \"../../redux/usersReducer\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport Modal from \"react-modal\";\r\nimport PostForm from \"../new-post-form/new-post-form\";\r\n\r\nimport './posts.scss';\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst Posts = React.memo((props) => {\r\n\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  let userPosts = useSelector(state => state.users.userPosts);\r\n\r\n  let dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    let itemId = props.match.params.itemId;\r\n    console.log(itemId);\r\n    dispatch(getUserPosts(itemId));\r\n  }, [dispatch, props.match.params.itemId]);\r\n\r\n  console.log(userPosts);\r\n\r\n  return (\r\n    <div className=\"posts\">\r\n      <div className=\"user-post\">\r\n        <h3>All User Posts</h3>\r\n        <button type=\"button\" className=\"add-post-btn\" onClick={() => setModalIsOpen(true)}>Add New Post</button>\r\n      </div>\r\n      {\r\n        userPosts.map(posts => <Post key={posts.id} \r\n                                    id={posts.id} \r\n                                    userId={posts.userId} \r\n                                    title={posts.title} \r\n                                    body={posts.body}/>)\r\n      }\r\n      <Modal isOpen={modalIsOpen}\r\n          onRequestClose={() => setModalIsOpen(false)}\r\n          className=\"modal\"\r\n          preventScroll={true}\r\n          overlayClassName=\"overlay\">\r\n          <div className=\"modal-title\">\r\n              <h2>New post</h2>\r\n              <span onClick={() => setModalIsOpen(false)}>&#10006;</span>\r\n          </div>\r\n          <PostForm closeModal={setModalIsOpen}/>\r\n      </Modal>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default withRouter(Posts);\r\n","\r\nimport './post-details.scss';\r\n\r\nconst CommentsItem = ({name, email, body}) => {\r\n  return (\r\n    <div className=\"comments__item\">\r\n        <h3>{name}</h3>\r\n        <span>email: {email}</span>\r\n        <p>\r\n            {body}\r\n        </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommentsItem;\r\n","import CommentsItem from \"./comments-item\";\r\nimport './post-details.scss';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getComments } from \"../../redux/usersReducer\";\r\nimport { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst Comments = (props) => {\r\n\r\n    let {comments} = useSelector(state => state.users);\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n      let postId = props.match.params.postId;\r\n      console.log(postId);\r\n      dispatch(getComments(postId));\r\n    }, [dispatch, props.match.params.postId]);\r\n    \r\n    return (\r\n        <div className=\"comments\">\r\n            {\r\n                comments.map(comment => <CommentsItem key={comment.id} \r\n                                                    name={comment.name}\r\n                                                    email={comment.email}\r\n                                                    body={comment.body} />)\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Comments);\r\n","import { useSelector, useDispatch } from \"react-redux\";\r\nimport Comments from \"./comments\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getPost, deletePost, updatePost } from \"../../redux/usersReducer\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport './post-details.scss';\r\n\r\nconst PostDetails = (props) => {\r\n\r\n  let {title, body, id} = useSelector(state => state.users.userPosts);\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [inputTitle, setInputTitle] = useState(title);\r\n  const [textareaBody, setTextareaBody] = useState(body);\r\n\r\n  let dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    let postId = props.match.params.postId;\r\n    console.log(postId);\r\n    dispatch(getPost(postId));\r\n  }, [dispatch, props.match.params.postId]);\r\n\r\n  const onClickDeletePost = () => {\r\n    dispatch(deletePost(id));\r\n    setTimeout(() => {\r\n      props.history.push(\"/\");\r\n    }, 2000)\r\n  }\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  }\r\n\r\n\r\n  const onUpdatePost = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updatePost(id, {title: inputTitle, body: textareaBody}));\r\n    setEditMode(false);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"post-details\">\r\n        {!editMode &&\r\n          <div className=\"post\">\r\n            <div className=\"author\">\r\n              <h3>{title}</h3>\r\n              <div className=\"btn__block\">\r\n                <button className=\"edit-btn\" onClick={activateEditMode}>Edit</button>\r\n                <button className=\"delete-btn\" onClick={onClickDeletePost}>Delete</button>\r\n              </div>\r\n            </div>\r\n            <p className=\"post-text\">{body}</p>\r\n          </div>  \r\n        }\r\n        {editMode &&\r\n          <form onSubmit={onUpdatePost} className=\"post\">\r\n            <div className=\"author\">\r\n              <input type=\"text\" \r\n                    name=\"title\" \r\n                    value={inputTitle || title} \r\n                    className=\"input-form\"\r\n                    placeholder=\"title\"\r\n                    onChange={e => setInputTitle(e.target.value)} />\r\n              <div className=\"btn__block\">\r\n                <button className=\"edit-btn\" type=\"submit\" >Save</button>\r\n              </div>\r\n            </div>\r\n            <textarea name=\"editBody\" \r\n                    value={textareaBody || body} \r\n                    className=\"textarea-form edit-textarea\"\r\n                    placeholder=\"text\"\r\n                    onChange={e => setTextareaBody(e.target.value)} >\r\n            </textarea>\r\n          </form>\r\n        }\r\n      <Comments/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(PostDetails);\r\n","\nimport Header from \"../header/header\";\nimport Users from '../users/users';\nimport Posts from \"../posts/posts\";\nimport PostDetails from \"../post-details/post-details\";\nimport { Route, Switch } from \"react-router-dom\";\nimport './app.scss';\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Header/>\n     <div className=\"content\">\n        <Switch>\n          <Route exact path=\"/\" component={Users}/>\n          <Route path=\"/posts/:itemId?\" render={() => <Posts/>}/>\n          <Route path=\"/post-details/:postId?\" render={() => <PostDetails/>}/>\n        </Switch>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport usersReducer from \"./usersReducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nconst reducers = combineReducers({\r\n    users: usersReducer,\r\n    form: formReducer\r\n});\r\n\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App />\n        </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}